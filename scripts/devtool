#!/usr/bin/env uv run --script
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "click",
#     "tomlkit",
#     "psutil",
#     "semver",
# ]
# ///
# The above comment is managed by uv, do not edit it manually.
# It enables uv to manage the dependencies and the Python version.
# See PEP 723 for more information.
# https://peps.python.org/pep-0723/


from collections.abc import Sequence, Collection
from contextlib import suppress
from os import PathLike
import subprocess
from typing import Any, NamedTuple, cast, TYPE_CHECKING
import socket
import sys
from shutil import which
import json
import os
from pathlib import Path

import psutil
import click
from semver import Version
import tomlkit
import tomlkit.container
from tomlkit.toml_file import TOMLFile
import webbrowser

if TYPE_CHECKING:
    from subprocess import _FILE


ROOT = Path(__file__).parent.parent.resolve()
SCRIPTS = ROOT / 'scripts'
BIN = ROOT / 'bin'
DOCS = ROOT / 'docs'
IMGS = DOCS / 'img'
SRC = ROOT / 'src'
NODE_BIN = SCRIPTS / 'node_modules/.bin'
MARKSERV = NODE_BIN / 'markserv'


SUBPROJECTS =[
    p
    for pattern in (
            'scripts',
            'mcp-server',
            'vscode-chat',
            'houdini/h*.*',
            "docs",
            'hdas'
        )
    for p in ROOT.glob(pattern)
    if p.is_dir()
]
'''
Paths to all the subproject directories.
'''


debug_on: bool = False
verbose_on: bool = False
quiet_on: bool = False
silent_on: bool = False

def run(*cmds: Any,
        cwd: PathLike|str=ROOT,
        env: dict[str,str]|None=None,
        shell: bool=False,
        stdout: '_FILE'=None,
        stderr: '_FILE'=None,
    ) -> subprocess.CompletedProcess:
    "Run the given command."
    cmd = [str(arg) for arg in cmds]
    cmd[0] = which(cmd[0]) or cmd[0]
    if debug_on:
        print(f"Running command: {' '.join(cmd)}")
    env = env or os.environ.copy()
    result: subprocess.CompletedProcess = subprocess.run(cmd,
                                                        cwd=str(cwd),
                                                        env=env,
                                                        shell=shell,
                                                        stderr=stderr,
                                                        stdout=stdout,
                                                        )
    if result.returncode != 0:
        raise RuntimeError(f"Command exited with return code {result.returncode}.")
    if debug_on:
        print("Command completed successfully.")
    return result

def capture(*cmds: Any,
            env: dict[str,str]|None=None,
            shell: bool=False,
        stdout: '_FILE'=None,
        stderr: '_FILE'=None,
            **kwargs) -> str:
    "Capture the output of the given command."
    cmd = [str(arg) for arg in cmds]
    cmd[0] = which(cmd[0]) or cmd[0]
    env = env or os.environ.copy()
    if debug_on:
        print(f"Running command: {' '.join(cmd)}")
    result: subprocess.CompletedProcess = subprocess.run(cmd,
                                                        cwd=str(ROOT),
                                                        capture_output=True,
                                                        text=True,
                                                        env=env,
                                                        shell=shell,
                                                        stdout=stdout,
                                                        stderr=stderr,
                                                        **kwargs
                                                        )
    if result.returncode != 0:
        raise RuntimeError(f"Command exited with return code {result.returncode}.")
    if debug_on:
        print("Command completed successfully.")
    text = result.stdout
    if debug_on:
        print(f"Command output: '{text}'")
    return text


def spawn(*cmds: Any,
            cwd: PathLike|str=ROOT,
            env: dict[str,str]|None=None,
            shell: bool=False,
            stdout: '_FILE'=None,
            stderr: '_FILE'=None,
            **kwargs
        ) -> subprocess.Popen:
    "Spawn the given command."
    cmd = [str(arg) for arg in cmds]
    cmd[0] = which(cmd[0]) or cmd[0]
    env = env or os.environ.copy()
    if debug_on:
       print(f"Running command: {' '.join(cmd)}")
    proc = subprocess.Popen(cmd,
                            cwd=str(cwd),
                            env=env,
                            shell=shell,
                            stdout=stdout,
                            stderr=stderr,
                            **kwargs
                            )
    # In the expected case, the process will not have terminated,
    # and the return code will be None. If the process has already terminated,
    # (whether with "success" or otherwise) we raise an error.
    if proc.returncode is not None:
        raise RuntimeError(f"Command exited prematurely with return code {proc.returncode}.")
    if debug_on:
        print("Command started successfully.")
    return proc


@click.group()
@click.option('--debug', is_flag=True, help="Enable debug mode.")
@click.option('--verbose', is_flag=True, help="Enable verbose mode.")
@click.option('--quiet', is_flag=True,
              help="Suppress most output.")
@click.option('--silent', is_flag=True,
              help="Suppress all output.")
def main(debug: bool=False,
         verbose: bool=False,
         quiet: bool=False,
         silent: bool=False,
         ) -> None:
    """
    Update and generate documentation and other files, and perform
    other project-specific tasks.

    Supply the --help option for more information on a specific command.
    """
    global debug_on, verbose_on, quiet_on, silent_on
    verbose_on = verbose
    if debug:
        debug_on = verbose_on = True
        quiet_on = silent_on = False
    elif verbose:
        debug_on = False
        verbose_on = True
        quiet_on = False
        silent_on = False
    elif quiet:
        debug_on = False
        verbose_on = False
        quiet_on = True
        silent_on = False
    elif silent:
        debug_on = False
        verbose_on = False
        quiet_on = False
        silent_on = True

@main.group(name='server')
def server() -> None:
    """
    <CMD> Operations on the local documentation server.
    Use the --help option for more information on a specific command.
    """
    pass

@main.group(name='update')
def update() -> None:
    """
    <CMD> Operations that update the project.
    Use the --help option for more information on a specific command.
    """
    pass


@main.group(name='node')
def node_group() -> None:
    '''
    Perform operations related to configuring using node.js
    '''
    pass


@update.group('all')
def update_all() -> None:
    """
    <CMD> Operations that update an entire set of files.
    Use the --help option for more information on a specific command.

    Example:
      devtool update all diagrams
    """
    pass

@update_all.command(name='release')
def run_all():
    "Run all commands in preparation for release."
    update_diagrams()
    sync_dependencies()
    update_version()


def check_pid(pid: int|None):
    """
    Check if a process with the given PID is running using psutil.
    Args:
        pid (int|None): The process ID to check.
    Returns:
        bool: True if the process is running, False otherwise.
    """
    if pid is None or pid <= 0:
        return False
    with suppress(Exception):
        return psutil.pid_exists(pid)
    return False


BACKGROUND_COLOR = 'fdf2e4'
DIAGRAMS: list[tuple[Path, *tuple[str,...]]] = [
        (IMGS / 'compiler_classes.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
        (IMGS / 'input_classes.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
        (IMGS / 'erDiagram.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
        (IMGS / 'erDiagramUserSubset.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
        (IMGS / 'erDiagramGeometry.mmd', '-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1'),
]

@update.command(name='diagram')
@click.argument('diagram', type=click.Path(exists=True))
@click.option('--png', is_flag=True, help="Generate a PNG file instead of an SVG file.")
def update_diagram_command(diagram: PathLike|str, png: bool=False) -> None:
    "[<PATH>] Update the given diagram."
    try:
        update_diagram(diagram, png=png)
    except* Exception as e:
        for exc in e.exceptions:
            print(f"Failed to update diagram: {exc}", file=sys.stderr)
        sys.exit(1)
    print("Diagram updated successfully.")
    sys.exit(0)


def update_diagram(diagram: PathLike|str, *params: str,
                   png: bool=False) -> None:
    "<PATH> Update the given diagram."
    diagram = Path(diagram).resolve()
    fmt = '.svg'
    if png:
        fmt = '.png'
    if not params:
        diagram_spec = next((d for d in DIAGRAMS if d[0] == diagram), None)
        if diagram_spec is None:
            print(f"Diagram {diagram} not found in the list of diagrams, using defaults", file=sys.stderr)
            params = ('-t', 'default', '--backgroundColor', BACKGROUND_COLOR, '-s', '1')
        else:
            params = diagram_spec[1:]

    infile = ROOT / diagram
    outfile = infile.with_suffix(fmt)
    if not infile.exists():
        raise FileNotFoundError(f"Diagram {diagram} not found.")
    if verbose_on:
        print(f"Updating {diagram}...")
    try:
        run('npx', 'mmdc', '-i', infile, '-o', outfile, *params)
    except Exception as e:
        raise RuntimeError(f"Failed to update {diagram}: {e}.") from e


@update_all.command(name='diagrams')
@click.option('--force', is_flag=True, help="Force update all diagrams.")
@click.option('--suffixes',
              type=click.STRING,
              default='.svg',
              help="Comma-separated list of suffixes.")
def update_diagrams_command(force: bool=False, suffixes: str='') -> None:
    "Update all diagrams."
    try:
        if verbose_on:
            print(f"Updating diagrams with suffixes {suffixes}...")
        suffixes_ = [
            s2
            for s2 in (
                s.strip()
                for s in suffixes.split(',')
            )
            if s2
        ]
        update_diagrams(suffixes=suffixes_, force=force)

    except* Exception as e:
        for exc in e.exceptions:
            print(f"Failed to update diagrams: {exc}", file=sys.stderr)
        sys.exit(1)
    print("Diagrams updated successfully.")
    sys.exit(0)


def repo_relative(f: PathLike|str) -> Path:
    '''
    Return a path relative to the repository root.
    '''
    f = ROOT / f
    f = f.resolve()
    f = f.relative_to(ROOT)
    return f

_git: Path|None = None

def find_git() -> Path:
    """
    Find the git executable in the system PATH.
    Returns:
        Path to the git executable.
    """
    global _git
    if _git is None:
        g = which('git')
        if g is None:
            raise RuntimeError("git not found in PATH.")
        _git = Path(g)
    return _git

def same_commit(files: Sequence[PathLike|str]) -> bool:
    '''
    Check if all files are at the same commit.
    Args:
        files (Sequence[PathLike|str]): A sequence of file paths.
    Returns:
        bool: True if all files are at the same commit, False otherwise.
    '''
    git = find_git()
    matches  = capture(git, 'log', '--name-only', '-n', 1, '--format=', '--',
                       *(repo_relative(f) for f in files)).strip()
    return len(files) == matches.count('\n') + 1

def is_clean(file: PathLike|str) -> bool:
    '''
    Check if the file is clean (not modified).
    Args:
        file (PathLike|str): The file path.
    Returns:
        bool: True if the file is clean, False otherwise.
    '''
    git = find_git()
    matches  = capture(git, 'status', '--porcelain', '--', repo_relative(file))
    return not matches.strip()

def needs_update(*files: PathLike|str) -> bool:
    '''
    Check if any of the files need to be updated.
    Args:
        files PathLike|str]: 2 or more file paths.
    Returns:
        bool: True if any of the files need to be updated, False otherwise.
    '''
    if len(files) < 2:
        if debug_on:
            print("Nothing to update, only one file.")
        # Nothing to update.
        return False
    # Check 1, if all the files exist.
    if not all((ROOT / f).exists() for f in files):
        if debug_on:
            print("Not all files exist, rebuilding")
        return True
    # Check 2, if all the files are at the same commit.
    if not same_commit(files):
        if debug_on:
            print("Files are not at the same commit, rebuilding")
        return True
    # Check 3, if all the files are clean.
    if not all(is_clean(f) for f in files):
        if debug_on:
            print("Files are not clean, rebuilding")
        return True
    if debug_on:
        print("Files are clean, no need to update.")
    return False


def update_diagrams(suffixes: Collection[str]=('.svg'),
                    force: bool=False,
                    ) -> None:
    '''
    Update all diagrams, collecting errors into a single ExceptionGroup.

    Parameters:
        suffixes (Collection[str]): A collection of suffixes to check for.
        force (bool): If True, force update all diagrams, even if they are up to date.
    '''
    def replace_suffix(f: PathLike|str, suffix: str) -> Path:
        "Replace the suffix of a file, but add more to the stem."
        f = Path(f)
        f = f.with_suffix('')
        return f.with_name(f.stem + suffix)
    excs = []
    for diagram, *params in DIAGRAMS:
        try:
            files =[
                                replace_suffix(diagram, suffix)
                                for suffix in suffixes
                            ]
            if force or needs_update(diagram, *files):
                update_diagram(diagram, *params)

        except Exception as e:
            excs.append(e)
    if excs:
        raise ExceptionGroup("Failed to update some diagrams", excs)

@update.command(name='version')
def update_version() -> None:
    "Update the version in the pyproject.toml file."

    pyproject = ROOT / 'pyproject.toml'
    if not pyproject.exists():
        raise FileNotFoundError("pyproject.toml not found.")
    file = TOMLFile(pyproject)
    toml = file.read()
    project = cast(tomlkit.container.Container, toml['project'])
    version = Version.parse(str(project['version']))
    version = version.bump_patch()
    project['version'] = str(version)
    print(f"Updating version to {version}...")
    file.write(toml)


PORT_FILE = ROOT / '.browse.html.port'
RELOAD_FILE = ROOT / '.browse.reload.port'
PID_FILE = ROOT / '.browse.pid'
LOG_FILE = ROOT / '.browse.log'


def find_free_port():
    """Finds an available port on the system.

    Returns:
        int: An available port number.
    """
    sock = socket.socket()
    # We are binding on all interfaces, to find a port that is completely free.
    # We do not communicate with the socket, and immediately discard it, and
    # we never listen on it, so we do not need to worry about it being an exposed
    # interface.
    #
    # We also want to avoid creating a situation where we get a port that is in
    # the process of being opened by another process, but not yet bound. We are
    # not in charge of the eventual binding and listen; we cannot just bind to
    # one interface. We would have to predict and enumerate the interfaces that the
    # server will bind to, and then bind to all of them, which is not reliably
    # possible.
    #
    # Race conditions here are unavoidable, but this should be a good enough
    # approximation. We pass the port off to the server, which will then bind to it
    # with localhost, so it will be bound to the correct interface, and we can't do
    # anything about the race condition. The user can retry if they get an error.
    sock.bind(('', 0))  # Bind to all interfaces on a random available port
    port = sock.getsockname()[1]
    sock.close()
    return port

def check_port(port: int|None):
    """Check if a port is in use on the system.

    Args:
        port (int): The port number to check.

    Returns:
        bool: True if the port is in use (a connection can be established), False otherwise.
    """
    if port is None or port <= 0:
        return False
    def try_AF(af: int):
        with suppress(Exception):
            sock = socket.socket(af, socket.SOCK_STREAM)
            sock.settimeout(1)  # Set a timeout value (in seconds)
            sock.connect(("localhost", port))
            sock.close()
            return True
        return False
    return try_AF(socket.AF_INET6) or try_AF(socket.AF_INET)


def read_id_file(file: PathLike|str) -> int | None:
    "Read the id from the given file."
    file = ROOT / file
    with suppress(Exception):
        if not file.exists():
            return None
        with file.open('r') as f:
            return int(f.read().strip())
    return None

def save_id_file(file: PathLike|str, value: int|None) -> None:
    "Save the id to the given file."
    file = ROOT / file
    if value is None or value <= 0:
        value = 0
    with file.open('w') as f:
        f.write(str(value))

class ServerStatus(NamedTuple):
    """
    A named tuple representing the status of the server.
    The first value is a boolean indicating if the server is running.
    The second value is a tuple containing the pid, html port, and reload port.
    The pid will be None if the server is not running.
    The html port and reload port will be None if they are not set, otherwise
    they will be the port numbers of the last run. This means we will try to
    reuse the same ports if the server is restarted.
    """
    pid: int | None
    "Will be None if the server is not running."
    html_port: int | None
    "Will be None if the server has not been started."
    reload_port: int | None
    "Will be None if the server has not been started."


def get_server_status() -> ServerStatus:
    '''
    Check the status of the server. Cleans up dead servers and pid/port files
    if they are found, and returns the status of the server.

    Returns:
        ServerStatus: A named tuple containing the status of the server.
    '''
    html_port = read_id_file(PORT_FILE)
    reload_port = read_id_file(RELOAD_FILE)
    pid = read_id_file(PID_FILE)
    html_port_ok = check_port(html_port)
    reload_port_ok = check_port(reload_port)
    pid_ok = check_pid(pid)
    if debug_on:
        print(f'{html_port=} {html_port_ok=}')
        print(f'{reload_port=} {reload_port_ok=}')
        print(f'{pid=} {pid_ok=}')
        print(f'{check_port(html_port)=} {check_port(reload_port)=} {check_pid(pid)=}')
    status = html_port_ok and reload_port_ok and pid_ok
    if not status:
        stop_server(pid)
        return ServerStatus(None, html_port, reload_port)
    return ServerStatus(pid, html_port, reload_port)


@server.command(name='status')
def server_status(silent: bool=False) -> None:
    "Check the status of the server."
    pid, html_port, reload_port = get_server_status()
    if not silent:
        if pid is not None:
            print(f"Server is running, {pid=}, {html_port=}, {reload_port=}")
            print(f"Server is running on http://localhost:{html_port}")
        else:
            print("Server is not running.")
            print(f'Last used ports: {html_port=} {reload_port=}')
    if pid is None:
        sys.exit(1)

def stop_server(pid: int|None) -> None:
    """
    Stop the server if it is running.

    Args:
        pid (int|None): The process ID of the server.
    """
    if pid is not None and check_pid(pid):
        with suppress(Exception):
            p = psutil.Process(pid)
            p.terminate()
        # If the server is not running, we clear the pid file. We leave it in place because
        # it is the key for the VSCode Explorer's collapsing related files together, so it
        # declutters the explorer view. We keep the port files in place so that we can
        # reuse the ports if the server is restarted, allowing stale browser tabs to reconnect.
        save_id_file(PID_FILE, 0)


@server.command(name='stop')
def stop_server_command() -> None:
    "Stop the server if it is running."
    pid = read_id_file(PID_FILE)
    stop_server(pid)
    print("Server killed.")


def start_server() -> ServerStatus:
    """
    Start the server if it is not running.

    Returns:
        ServerStatus: A named tuple containing the status of the server.
    """
    (pid, html_port, reload_port) = get_server_status()
    if pid is not None:
        if debug_on:
            print("Server is already running.")
        return ServerStatus(pid, html_port, reload_port)
    if not html_port:
        html_port = find_free_port()
    if not reload_port:
        reload_port = find_free_port()
    save_id_file(PORT_FILE, html_port)
    save_id_file(RELOAD_FILE, reload_port)
    if debug_on:
        print(f"Starting server on port {html_port} with reload port {reload_port}.")
        silent_flag = ()
        output_flags = {'stderr': subprocess.PIPE}
    else:
        silent_flag = ('--silent',)
        # Open a stream to the log file. We don't close it as we pass ownership to the spawned
        # process. We don't want to close it, as the process will be writing to it.
        logstream = open(LOG_FILE, 'w')

        output_flags = {'stdout': logstream, 'stderr': logstream}
    proc: subprocess.Popen = spawn(MARKSERV,
        '-p', str(html_port),
        '-b', str(reload_port),
        '--browser', 'false',
        *silent_flag,
        'README.md',
        **output_flags       # type: ignore[arg-type]
        )
    if proc.returncode:
        error_message = proc.stderr.read().decode() if proc.stderr else "Unknown error"
        print(f"Failed to start the server: {error_message}", file=sys.stderr)
        sys.exit(proc.returncode)
    pid = proc.pid
    if not pid:
        print("Failed to get the process ID.", file=sys.stderr)
        save_id_file(PID_FILE, 0)
        return ServerStatus(None, html_port, reload_port)
    save_id_file(PID_FILE, pid)
    return ServerStatus(pid, html_port, reload_port)

@server.command(name='start')
def start_server_command() -> None:
    "Start the server if it is not running."
    pid, html_port, reload_port = get_server_status()
    if pid is not None:
        print(f"Server is running on http://localhost:{html_port}")
        sys.exit(0)
    status = start_server()
    if status.pid is not None:
        print(f"Server started on http://localhost:{status.html_port}")
    else:
        print("Failed to start the server.", file=sys.stderr)
        sys.exit(1)


@main.command(name='browse')
@click.argument('file', type=click.Path(exists=True), default=ROOT / 'README.md')
def browse_docs(file: PathLike|str = ROOT / 'README.md') -> None:
    "[<PATH>] Open the documentation in a browser."

    file = Path(file).resolve()
    if not file.exists():
        print(f"File {file} not found, browsing directory.", file=sys.stderr)
        file = file.parent

    if ROOT not in file.parents and file != ROOT:
        # Onn general security principles, we should not allow
        # browsing outside the project directory. It's not really a
        # security issue here.
        print(f"File {file} is not in the project directory.", file=sys.stderr)
        sys.exit(1)

    file = file.relative_to(ROOT)

    if not MARKSERV.exists():
        print(f"Markserv not found at {MARKSERV}. Please run 'build setup' first.", file=sys.stderr)
        sys.exit(1)

    (pid, html_port, reload_port) = get_server_status()
    if pid is None:
        (pid, html_port, reload_port) = start_server()
    if not pid:
        print("Failed to start the server.", file=sys.stderr)
        sys.exit(1)
    assert html_port is not None
    if verbose_on:
        print(f"Opening documentation in browser at http://localhost:{html_port}/{file}")
    webbrowser.open(f'http://localhost:{html_port}/{file}')


@main.command(name='sync')
def sync_dependencies() -> None:
    "Update the requirements.txt and uv.lock files."
    run('uv', 'sync')
    run('uv', 'pip', 'compile', 'pyproject.toml', "-o", 'requirements.txt')


def flatten_tree(*dirs: Path):
    """
    Depth-first flattening of the directory tree.

    The only ordering is that children are yielded before parents, and that
    directories given as arguments are processed in the order given.

    Args:
        dirs (Path): The directories to flatten.
    Yields:
        paths to all files and directories in the trees.
    """
    for dir in dirs:
        if not dir.is_dir():
            yield dir
        else:
            for f in dir.iterdir():
                if f.is_dir():
                    yield from flatten_tree(f)
                yield f
            yield dir


def rmdir(*dirs: Path,
          verbose: bool=verbose_on) -> None:
    "Remove the given directories (or files) and contents."
    for f in flatten_tree(*dirs):
        if verbose:
            print(f"Removing {f}")
        if f.is_symlink():
            f.unlink(missing_ok=True)
        elif f.is_dir():
            f.rmdir()
        else:
            f.unlink(missing_ok=True)


@node_group.command(name='version')
@click.option('--range', is_flag=True,
              help="Print the range of node versions supported by this project.")
def show_node_version(range) -> None:
    """
    Print the version of node.js configured for this project in the package.json file.

    This also updates the .nvmrc file to match the version in package.json.
    """
    print(node_version(range))


def node_version(range: bool=False) -> str:
    root_pkg = ROOT / 'package.json'
    with root_pkg.open('r') as f:
        pkg = json.load(f)
    version= pkg.get('engines', {}).get('node', '23.11.0')
    if not range:
        # If we are not in range mode, we want to use the exact version.
        # We remove the prefix and suffixes, qne pick the minimum version
        # of the first element of the range.
        version = version.strip().lstrip('^>=<')
        version = version.split(',', 1)[0]
    return version

@node_group.command(name='update')
def node_update() -> None:
    """
    Update the node version to match the package.json file..
    """
    version = node_version()
    bin_node = BIN / 'node'
    bin_node.unlink(missing_ok=True)
    bin_node.symlink_to(version)
    for subproject in (ROOT, *SUBPROJECTS):
        package = subproject / 'package.json'
        if package.exists():
            nvmrc = ROOT / '.nvmrc'
            with nvmrc.open('w') as f:
                f.write(version)
            print(f"{subproject.stem}: Updated .nvmrc to {version}")
            run('pnpm', 'install', cwd=subproject, shell=False)
    run('pnpm', 'install')

@node_group.command(name='path')
@click.option('--version', is_flag=False, cls=click.Option,
              help="Specify the version of node.js to use.")
def node_path_command(version:str|None=None) -> None:
    """```
    Print the path to the node executable.

    Returns 0 if the node executable is found, non-zero otherwise.
    """
    path = node_path(version)
    print(path)
    if not path.exists():
        print(f"Node executable not found at {path}.", file=sys.stderr)
        sys.exit(2)
    print(path)
    sys.exit(0)

def node_path(version: str|None=None) -> Path:
    "Return the path to the node executable."
    if version is None:
        version = node_version()
    nvm_dir = Path.home() / '.nvm'
    node_path = nvm_dir / 'versions' / version / 'bin' / 'node'
    return node_path.resolve()

@node_group.command(name='run')
@click.argument('args', nargs=-1)
def node_run(args: tuple[str,...]) -> None:
    "Run the node command."
    node = BIN / 'node'
    run(node, *args, shell=False)


@main.command(name='setup')
@click.option('--force',
              is_flag=True,
              help="Force setup, removing existing directories.")
def setup(force: bool=False,
        ) -> None:
    "Set up the project. This includes installing dependencies and setting up the server."
    if quiet_on:
        output = subprocess.DEVNULL
    else:
        output = None
    node_env = os.environ.copy()
    version = node_version()
    nvm_dir = Path.home() / '.nvm'
    node_env['NVM_DIR'] = str(nvm_dir)
    node_env['NODE_VERSION'] = version
    nvm_setup = nvm_dir / 'nvm.sh'
    run('bash', '-c', nvm_setup, ';', 'nvm', 'install', version,
        cwd=ROOT,
        stdout=output,
        stderr=output,
    )
    nvm_node = node_path()
    BIN = ROOT / 'bin'
    bin_node = BIN / 'node'
    bin_node.unlink(missing_ok=True)
    bin_node.symlink_to(nvm_node)

    # None of these should be in the repository root.
    # They are all in the subprojects.
    # We remove them to avoid conflicts with the subprojects.
    rmdir(
        ROOT / '.venv',
        ROOT / '_node_modules',
        ROOT / 'pnpm-lock.yaml',
        ROOT / 'uv.lock',
        ROOT / 'houdini_versions_cache.json',
        ROOT / 'requirements.txt',
    )
    uv_env = os.environ.copy()
    del uv_env['VIRTUAL_ENV']
    for subproject in (ROOT, *SUBPROJECTS):
        if not silent_on:
            print(f"Setting up {subproject.stem}...")
        pyproject = subproject / 'pyproject.toml'
        package = subproject / 'package.json'
        if force:
            rmdir(
                *(subproject / d
                  for d in ('node_modules', 'dist', 'build')),
                *(subproject.glob('**/*.egg-info')),
                *(subproject.glob('__pycache__')),
            )
        # We don't want to install dependencies in the root directory
        # as this will lead to conflicts with the subprojects, which are designed around
        # isolating dependencies.
        if subproject == ROOT:
            continue
        if pyproject.exists():
            run('uv', 'sync',
                cwd=subproject,
                env=uv_env,
                stdout=output,
                stderr=output,
            )
        if package.exists() and subproject != ROOT:
            run('pnpm', 'install',
                cwd=subproject,
                env=node_env,
                stdout=output,
                stderr=output,
            )


if __name__ == "__main__":
    main()
