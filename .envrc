#!/usr/bin/env bash

set -euo pipefail


_GIT_TOPLEVEL="$(git rev-parse --show-toplevel)"
export GIT_TOPLEVEL="${_GIT_TOPLEVEL}"
_GIT_DIR="$(git rev-parse --git-dir)"
export GIT_DIR="${_GIT_DIR}"


ROOT="${_GIT_TOPLEVEL}"
export ROOT

# This file is used to set the environment for the project.

if ! has uv; then
    echo "uv is not installed. Please install it first."
    echo "See: https://docs.astral.sh/uv/getting-started/installation/"
    echo "Then run 'direnv allow' to recheck and continue"
    exit 1
fi


PATH_add "$HOME/.local/bin"
# Ensure we have the right version of python up-front.
if [ -f .python-version ]; then
    uv python install "$(cat .python-version)"
fi
echo "Setting up environment for project at ${ROOT}" 1>&2

if [ -f .nvmrc ]; then
    NODE_VERSION="v$(cat .nvmrc 2>/dev/null)"
    export NODE_VERSION
    NODE_VERSIONS="$HOME/.nvm/versions/node"
    export NODE_VERSIONS
    NVM_INC="$NODE_VERSIONS/$NODE_VERSION/include/node"
    export NVM_INC
    NODE_BIN="$NODE_VERSIONS/$NODE_VERSION/bin"
    export NODE_BIN
    NODE_VERSION_PREFIX=v
    export NODE_VERSION_PREFIX
    PATH_add "$NODE_BIN"

    if ! has "${NODE_BIN}/node"; then
        echo "Installing node version ${NODE_VERSION}" 1>&2
        if [ ! -d "$NODE_VERSIONS" ]; then
            git clone https://github.com/nvm-sh/nvm.git "$HOME/.nvm"
            mkdir -p "$NODE_VERSIONS"
        fi
        # shellcheck disable=SC1091
        if source "$HOME/.nvm/nvm.sh" && nvm install "${NODE_VERSION}"; then
            echo "Node version ${NODE_VERSION} installed successfully" 1>&2
        else
            echo "Failed to install node version ${NODE_VERSION}" 1>&2
            exit 1
        fi
    fi

    use node "${NODE_VERSION}"

    if ! has pnpm; then
        echo "pnpm is not installed. Please install it first." 1>&2
        echo "See: https://pnpm.io/installation" 1>&2
        echo "Then run 'direnv allow' to recheck and continue" 1>&2
        exit 1
    fi
fi


# If the branch changes, we need to re-run the setup
watch_file "${_GIT_DIR}/HEAD"

PATH_add "$ROOT/bin"
PATH_add "$ROOT/scripts/.venv/bin"

# Handle configuring the project
devtool --debug setup 1>&2

dotenv_if_exists

# If devtool setup gave us a .venv at this level, we need to use it

if [ -d .venv ]; then
    # shellcheck disable=SC1091
    source .venv/bin/activate || true
fi

# If we have node, we need to add the local node_modules/.bin to the path
if [ -d "node_modules/.bin" ]; then
    PATH_add node_modules/.bin
fi
