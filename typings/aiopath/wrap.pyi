"""
This type stub file was generated by pyright.
"""

from typing import Any, Awaitable, Callable, NoReturn, Protocol, runtime_checkable
from .types import Decoratable

CoroutineResult[T] = Awaitable[T | None]
CoroutineFunction[**P,T] = Callable[P, CoroutineResult[T]]
CoroutineMethod[**P,T] = Callable[[Any, P], CoroutineResult[T]]
@runtime_checkable
class IsCallable[T](Protocol):
  def __call__(self, *args, **kwargs) -> T:
    ...
  


async def to_thread[**P,T](func: Decoratable, *args: P.args, **kwargs: P.kwargs) -> T:
  ...

def func_to_async_func[**P,T](func: Decoratable) -> CoroutineFunction:
  ...

method_to_async_method: Callable[[Decoratable], CoroutineFunction] = ...
def func_to_async_method[**P,T](func: Decoratable) -> CoroutineMethod:
  ...

def coro_to_async_method[**P,T](coro: CoroutineFunction) -> CoroutineMethod:
  ...

def to_async_method(func: Decoratable) -> CoroutineMethod | NoReturn:
  ...

