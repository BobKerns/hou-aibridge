"""
This type stub file was generated by pyright.
"""

from typing import AsyncContextManager, AsyncIterable, BinaryIO, Final, IO, TYPE_CHECKING, TextIO
from contextlib import asynccontextmanager
from aiofile import AIOFile, BinaryFileWrapper, TextFileWrapper
from anyio import AsyncFile
from aiopath.types import FileMode
from .types import Paths

if TYPE_CHECKING:
  ...
BEGINNING: Final[int] = ...
CHUNK_SIZE: Final[int] = ...
SEP: Final[str] = ...
ENCODING: Final[str] = ...
ERRORS: Final[str] = ...
FileData = bytes | str
Handle = TextFileWrapper | BinaryFileWrapper | IterableAIOFile | AsyncFile
class FileLike(IO):
  is_binary: bool
  ...


class TextFile(FileLike, TextIO):
  ...


class BinaryFile(FileLike, BinaryIO):
  ...


class IterableAIOFile(FileLike, AIOFile):
  def __init__(self, *args, errors: str | None = ..., newline: str | None = ..., **kwargs) -> None:
    ...
  
  def __aiter__(self) -> AsyncIterable[str]:
    ...
  
  async def read_text(self, encoding: str | None = ..., errors: str | None = ...) -> str:
    ...
  
  async def read(self, size: int = ..., offset: int | None = ...) -> FileData:
    ...
  
  async def write(self, data: FileData, offset: int | None = ...): # -> None:
    ...
  


async def read_lines(path: Paths, line_sep: str = ..., chunk_size: int = ..., offset: int = ..., encoding: str = ..., errors: str = ..., **kwargs) -> AsyncIterable[str]:
  ...

async def read_full_file(path: Paths, line_sep: str = ..., chunk_size: int = ..., offset: int = ..., encoding: str = ..., errors: str = ..., **kwargs) -> str:
  ...

@asynccontextmanager
async def get_handle(name: str, mode: FileMode = ..., buffering: int = ..., encoding: str | None = ..., errors: str | None = ..., newline: str | None = ...) -> AsyncContextManager[Handle]:
  ...

