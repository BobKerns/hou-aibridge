#!/usr/bin/env bash

### This file is used to set the environment for the project.
### It is automatically invoked by direnv when `cd`ing into any
### directory in the project, if you have direnv installed and
### configured. See: https://direnv.net/docs/installation.html

### All the .envrc files in the project are symbolic links to
### the one in the root of the project. Each subproject that
### needs a different environment should have its own symbolic link
### to this file. This way, we can have a single source of truth
### for the environment variables and the setup process.

### The behavior of this file is controlled by the presence of:
### - .envrc
### - .python-version version (triggers creating a local .venv)
### - .nvmrc version (triggers installing node dependencies in
###   the local node_modules).

set -euo pipefail

if [ -n "${NO_DIRENV-}" ]; then
    exit 0
fi

die() {
    echo "$@" 1>&2
    exit 1
}

_GIT_TOPLEVEL="$(git rev-parse --show-toplevel)"
export GIT_TOPLEVEL="${_GIT_TOPLEVEL}"
_GIT_DIR="$(git rev-parse --git-dir)"
export _GIT_DIR="${_GIT_DIR}"

# If the branch changes, we need to re-run the setup
watch_file "${_GIT_DIR}/HEAD"

ROOT="${_GIT_TOPLEVEL}"
export ROOT

# This file is used to set the environment for the project.

if ! has uv; then
    echo "uv is not installed. Please install it first."
    echo "See: https://docs.astral.sh/uv/getting-started/installation/"
    echo "Then run 'direnv allow' to recheck and continue"
    exit 1
fi


PATH_add "$HOME/.local/bin"
# Ensure we have the right version of python up-front.
if [ -f .python-version ]; then
    uv python install "$(cat .python-version)"
fi

# If we have a .nvmrc file, this is a node-using subproject.
# So ensure we have the right version of node up-front.
if [ -f .node-version ]; then
    NODE_VERSION="v$(cat .node-version 2>/dev/null)"
    export NODE_VERSION
    NODE_VERSIONS="$HOME/.nvm/versions/node"
    export NODE_VERSIONS
    NVM_INC="$NODE_VERSIONS/$NODE_VERSION/include/node"
    export NVM_INC
    NODE_BIN="$NODE_VERSIONS/$NODE_VERSION/bin"
    export NODE_BIN
    NODE_VERSION_PREFIX=v
    export NODE_VERSION_PREFIX
    PATH_add "$NODE_BIN"

    if ! has "${NODE_BIN}/node"; then
        echo "Installing node version ${NODE_VERSION}" 1>&2
        if [ ! -d "$NODE_VERSIONS" ]; then
            git clone https://github.com/nvm-sh/nvm.git "$HOME/.nvm"
            mkdir -p "$NODE_VERSIONS"
        fi
        # shellcheck disable=SC1091
        if source "$HOME/.nvm/nvm.sh" && nvm install "${NODE_VERSION}"; then
            echo "Node version ${NODE_VERSION} installed successfully" 1>&2
        else
            echo "Failed to install node version ${NODE_VERSION}" 1>&2
            exit 1
        fi
    fi

    use node "${NODE_VERSION}"
    corepack enable pnpm
    echo "$NODE_VERSION" > .node-version
fi

PATH_add "$ROOT/bin"
PATH_add "$ROOT/zabob-modules/.venv/bin"

# Handle configuring the project
# This configures the entire project, not just the current subproject.
# Inter-subproject dependencies are are thus satisfied immediately.
# Thanks to uv and pnpm, this is very quick.

# Set DEVTOOL_SETUP_FLAGS to --debug to debug, or --silent to minimize
# output. (--verbose and --quiet lie between those extremes.)

# shellcheck disable=SC2086
#find_up .venv || echo "find_up .venv failed:? $!" 1>&2

DEVTOOL="${ROOT}/bin/devtool"
export DEVTOOL

# shellcheck disable=SC2086
"$DEVTOOL" ${DEVTOOL_SETUP_FLAGS-} setup 1>&2 || echo "WARNING: devtool setup failed: $?" 1>&2

echo "SETUP: $(pwd)" 1>&2
eval "$("$DEVTOOL" find-up ".venv/bin/activate")" || echo "WARNING: Could not find .venv/bin/activate: $?" 1>&2

# Load the .env file, if it exists. This is used to set local
# environment variables for the project. This is useful for
# supplying SideFX credentials to download Houdini.
dotenv_if_exists


# If we have node, we need to add the local node_modules/.bin to the path
if [ -d "node_modules/.bin" ]; then
    PATH_add node_modules/.bin
fi
